{"version":3,"sources":["components/Header.js","context/CategoriesContext.js","context/RecipesContext.js","components/Form.js","context/ModalContext.js","components/Recipe.js","components/Error.js","components/ListRecipes.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","CategoriesContext","createContext","CategoriesProvider","props","useState","categories","setCategories","useEffect","fetchData","a","axios","get","category","data","drinks","Provider","value","children","RecipesContext","RecipesProvider","cat","recipes","setRecipes","ingredient","searchRecipes","setSearchRecipes","query","setQuery","split","length","join","replaceAll","fetchAPI","url","Form","search","setSearch","useContext","handleChange","event","target","name","action","onSubmit","e","preventDefault","type","placeholder","onChange","id","map","strCategory","ModalContext","ModalProvider","idRecipe","setIdRecipe","info","setInfo","fetchRecipe","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","minWidth","maxWidth","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Recipe","recipe","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredients","i","push","showIngredients","Error","message","ListRecipes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71d06ac7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return(\r\n    <header className='bg-info'>\r\n      <h1>Search Drink Recipes</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const CategoriesContext = createContext();\r\n\r\n// Provider is where functions and states are\r\n\r\nconst CategoriesProvider = (props) => {\r\n\r\n  // Create context's state\r\n  const [ categories, setCategories ] = useState([]);\r\n\r\n  // API calling with Axios\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = \"https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list\";\r\n      const category = await axios.get(url);\r\n      setCategories(category.data.drinks);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <CategoriesContext.Provider\r\n      value={{\r\n        categories\r\n      }}\r\n    >\r\n      {props.children}\r\n    </CategoriesContext.Provider>\r\n  )\r\n\r\n}\r\n\r\nexport default CategoriesProvider;","import { createContext, useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const RecipesContext = createContext();\r\n\r\nconst RecipesProvider = (props) => {\r\n\r\n  const [ recipes, setRecipes ] = useState([]);\r\n  const [ searchRecipes, setSearchRecipes ] = useState({\r\n    ingredient: \"\",\r\n    category: \"\"\r\n  })\r\n  const [ query, setQuery ] = useState(false);\r\n\r\n  const { ingredient, category } = searchRecipes;\r\n\r\n  let cat;\r\n  if(category.split(\" \").length <= 2) {\r\n  cat = category.split(\" \").join(\"_\");\r\n  } else {\r\n    cat = category.replaceAll(\" \",\"\").replaceAll(\"/\",\"_\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(query) {\r\n      const fetchAPI = async () => {\r\n        const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${ingredient}&c=${cat}`;\r\n        const data = await axios.get(url);\r\n        setRecipes(data.data.drinks);\r\n      }\r\n      fetchAPI();\r\n    }\r\n    \r\n  }, [searchRecipes, cat, ingredient, query])\r\n\r\n  return(\r\n    <RecipesContext.Provider\r\n      value={{\r\n        recipes,\r\n        setSearchRecipes,\r\n        setQuery\r\n      }}\r\n    >\r\n      {props.children}\r\n    </RecipesContext.Provider>\r\n  )\r\n}\r\n\r\nexport default RecipesProvider;","import React, { useContext, useState } from \"react\";\r\nimport { CategoriesContext } from \"../context/CategoriesContext\";\r\nimport { RecipesContext } from \"../context/RecipesContext\";\r\n\r\nconst Form = () => {\r\n\r\n  const [ search, setSearch ] = useState({\r\n    ingredient: \"\",\r\n    category: \"\"\r\n  })\r\n\r\n  const { ingredient, category } = search;\r\n\r\n  const { categories } = useContext(CategoriesContext);\r\n  const { setSearchRecipes, setQuery } = useContext(RecipesContext);\r\n\r\n  // handleChange function to get input's contents\r\n  const handleChange = (event) => {\r\n    setSearch({\r\n      ...search,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  return(\r\n    <form \r\n      action=\"\"\r\n      className=\"col-12\"  \r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        setSearchRecipes(search);\r\n        setQuery(true);\r\n      }}\r\n    >\r\n      <fieldset className=\"text-center\">\r\n        <legend>Search drinks by ingredient and category</legend>\r\n      </fieldset>\r\n\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-4\">\r\n          <input \r\n            type=\"text\"\r\n            name=\"ingredient\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search for ingredient\"\r\n            onChange={handleChange}\r\n            value={ingredient}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <select \r\n            name=\"category\"\r\n            className=\"form-control\"\r\n            id=\"\"\r\n            onChange={handleChange}\r\n            value={category}\r\n          >\r\n            <option value=\"\">--Select category--</option>\r\n            {categories.map(category => (\r\n              <option \r\n                key={category.strCategory} \r\n                // value=\"\"\r\n              >\r\n                {category.strCategory}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <button \r\n            className=\"btn btn-block btn-outline-info\"\r\n          >\r\n            Search drinks\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    \r\n  );\r\n}\r\n\r\nexport default Form;","import { createContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create context\r\nexport const ModalContext = createContext();\r\n\r\nconst ModalProvider = (props) => {\r\n\r\n  // Provider State\r\n  const [ idRecipe, setIdRecipe ] = useState(null);\r\n  const [ info, setInfo ] = useState({});\r\n\r\n  // When we have a recipe, call the API\r\n  useEffect( () => {\r\n    const fetchRecipe = async () => {\r\n      if(!idRecipe) return;\r\n      \r\n      const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idRecipe}`;\r\n\r\n      const data = await axios.get(url);\r\n      setInfo(data.data.drinks[0]);\r\n    }\r\n    fetchRecipe();\r\n  },[idRecipe])\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        info,\r\n        setIdRecipe,\r\n        setInfo\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ModalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ModalProvider;","import { useContext, useState } from 'react';\r\nimport { ModalContext } from '../context/ModalContext';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 ;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    minWidth: 320,\r\n    maxWidth: 520,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst Recipe = ({recipe}) => {\r\n\r\n  // Set up material-ui modal\r\n  const [ modalStyle ] = useState(getModalStyle);\r\n  const [ open, setOpen ] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  // Extracting context values\r\n  const { info, setIdRecipe, setInfo } = useContext(ModalContext);\r\n\r\n  // Show and give format to ingredients\r\n  const showIngredients = info => {\r\n    let ingredients = [];\r\n    for(let i = 1; i < 16; i++) {\r\n      if(info[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n          <li key={info[`strIngredient${i}`]}>{info[`strIngredient${i}`]} - {info[`strMeasure${i}`]}</li>\r\n        )\r\n      }\r\n    }\r\n    return ingredients;\r\n  }\r\n\r\n  return (\r\n      <div className=\"col-md-4 mb-3\">\r\n        <div className=\"card recipe-container\">\r\n          <h5 className=\"card-header recipe-title\">{recipe.strDrink}</h5>\r\n          <img className=\"card-img-top\" src={recipe.strDrinkThumb} alt={recipe.strDrink} />\r\n          <div className=\"card-body\">\r\n            <button\r\n              className=\"btn btn-block btn-info\"\r\n              onClick={() => {\r\n                setIdRecipe(recipe.idDrink);\r\n                handleOpen();\r\n              }}\r\n            >\r\n              Read Recipe\r\n            </button>\r\n\r\n            <Modal\r\n              open={open}\r\n              onClose={() => {\r\n                handleClose();\r\n                setIdRecipe(null);\r\n                setInfo({})\r\n              }}\r\n            >\r\n              <div \r\n                style={modalStyle}\r\n                className={classes.paper}\r\n              >\r\n                <h2>{info.strDrink}</h2>\r\n                <h3 className=\"mt-4\">Instructions</h3>\r\n                <p>\r\n                  {info.strInstructions}\r\n                </p>\r\n                <h3>Ingredients</h3>\r\n                <ul>\r\n                  {showIngredients(info)}\r\n                </ul>\r\n                <img className=\"img-fluid my-4\" alt={info.strDrink} src={info.strDrinkThumb} />\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Recipe\r\n","const Error = ({message}) => {\r\n  return (\r\n    <div>\r\n      <p className=\"alert alert-danger alert-dismissible fade show error-msg\">There's no drink in that category</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error\r\n","import { useContext } from \"react\";\r\nimport { RecipesContext } from \"../context/RecipesContext\";\r\nimport Recipe from \"./Recipe\";\r\nimport Error from \"./Error\";\r\n\r\nconst ListRecipes = () => {\r\n\r\n  // Extract recipes\r\n  const { recipes } = useContext(RecipesContext);\r\n\r\n  if(!recipes) return <Error />;\r\n  \r\n  return (\r\n    <div className=\"row mt-5\">\r\n      { recipes.map(recipe => (\r\n        <Recipe\r\n          key={recipe.idDrink}\r\n          recipe={recipe}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListRecipes\r\n","// import { Fragment } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport ListRecipes from './components/ListRecipes';\n\nimport CategoriesProvider from './context/CategoriesContext';\nimport RecipesProvider from './context/RecipesContext';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n    <CategoriesProvider>\n      <RecipesProvider>\n        <ModalProvider>\n          <Header />\n          <div className='container mt-5'>\n            <div className='row'>\n              <Form />\n            </div>\n            <ListRecipes />\n          </div>\n        </ModalProvider>\n      </RecipesProvider>\n    </CategoriesProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}